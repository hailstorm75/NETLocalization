using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis;
using System.Collections.Immutable;
using System.CodeDom.Compiler;

namespace Localization.Generator;

[Generator(LanguageNames.CSharp)]
public sealed class TranslationsAggregateSourceGenerator : IIncrementalGenerator
{
    #region Fields

    private const string TRANSLATION_SET_NAME = "Localization.Shared.Models.TranslationSet";
    private const string PROVIDER_ATTRIBUTE_NAME = "Localization.Shared.Attributes.TranslationProviderAttribute";
    private const string ATTRIBUTE_NAME = "Localization.Shared.Attributes.TranslationProviderAggregateAttribute";
    private const string TOOL_NAME = "Localizations.Generator";
    private const string VERSION = "1.0.0";

    #endregion

    private sealed class GetAllSymbolsVisitor(Func<INamedTypeSymbol, bool> predicate) : SymbolVisitor
    {
        private readonly LinkedList<INamedTypeSymbol> _symbols = new();

        public IReadOnlyCollection<INamedTypeSymbol> Symbols => _symbols;

        /// <inheritdoc />
        public override void VisitNamespace(INamespaceSymbol symbol)
            => Parallel.ForEach(symbol.GetMembers(), s => s.Accept(this));

        /// <inheritdoc />
        public override void VisitNamedType(INamedTypeSymbol symbol)
        {
            if (predicate(symbol))
                _symbols.AddLast(symbol);
        }
    }

    /// <inheritdoc />
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var providersSource = context.CompilationProvider.Select(static (compilation, _) =>
        {
            var visitor = new GetAllSymbolsVisitor(static symbol =>
                symbol.IsStatic &&
                symbol.GetAttributes().Any(static attr => attr.AttributeClass?.ToDisplayString() == PROVIDER_ATTRIBUTE_NAME));
            visitor.Visit(compilation.GlobalNamespace);

            return visitor.Symbols;
        });

        var targetClasses = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                fullyQualifiedMetadataName: ATTRIBUTE_NAME,
                predicate: static (node, _) => node is ClassDeclarationSyntax,
                transform: static (context, _) => (INamedTypeSymbol)context.TargetSymbol)
            .Where(static data => data is not null)
            .Collect();

        var combined = providersSource.Combine(targetClasses);

        context.RegisterSourceOutput(combined, static (ctx, pipeline) => Execute(ctx, pipeline));
    }

    private static void Execute(SourceProductionContext context, (IReadOnlyCollection<ISymbol> providers, ImmutableArray<INamedTypeSymbol> targets) pipeline)
    {
        foreach (var target in pipeline.targets)
        {
            if (target is null)
                continue;

            var classSource = GenerateAggregate(pipeline.providers, target);

            context.AddSource($"{target.Name}.g.cs", classSource);
        }
    }

    private static string GenerateAggregate(IReadOnlyCollection<ISymbol> providers, INamedTypeSymbol target)
    {
        // Creates a TextWriter to use as the base output writer.
        var baseTextWriter = new StringWriter();
        var indentWriter = new IndentedTextWriter(baseTextWriter, "    ");
        indentWriter.Indent = 0;

        indentWriter.WriteLine("// <auto-generated />");
        indentWriter.WriteLine("#pragma warning disable 1591"); // Disable warnings for missing XML comments
        indentWriter.WriteLineNoTabs(string.Empty);
        indentWriter.WriteLine($"namespace {target.ContainingNamespace.ToDisplayString()}");
        indentWriter.WriteLine("{");

        {
            indentWriter.Indent++;

            indentWriter.WriteLine($"static partial class {target.Name}");
            indentWriter.WriteLine("{");
            indentWriter.Indent++;

            {
                indentWriter.WriteLine("/// <summary>Gets aggregated translations from all providers</summary>");
                indentWriter.WriteLine("[global::System.Diagnostics.Contracts.Pure]");
                indentWriter.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
                indentWriter.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{TOOL_NAME}\", \"{VERSION}\")]");
                indentWriter.WriteLine($"public static global::System.Collections.Generic.IEnumerable<global::{TRANSLATION_SET_NAME}> GetTranslations()");
                indentWriter.WriteLine("{");
                indentWriter.Indent++;

                if (providers.Count == 0)
                    indentWriter.WriteLine("yield break;");
                if (providers.Count == 1)
                    indentWriter.WriteLine($"=> {providers.First()}.GetTranslations();");
                else
                    foreach (var provider in providers.Select(static provider => provider.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)))
                    {
                        indentWriter.WriteLine($"foreach (var translation in {provider}.GetTranslations())");
                        indentWriter.Indent++;
                        indentWriter.WriteLine("yield return translation;");
                        indentWriter.Indent--;
                    }

                indentWriter.Indent--;
                indentWriter.WriteLine("}");

                indentWriter.WriteLineNoTabs(string.Empty);

                indentWriter.WriteLine("/// <summary>Populates the <paramref name=\"translator\"/> with all available translations</summary>");
                indentWriter.WriteLine("/// <param name=\"translator\">Translator instance to populate</param>");
                indentWriter.WriteLine("/// <seealso cref=\"GetTranslations\"/>");
                indentWriter.WriteLine("[global::System.Diagnostics.Contracts.Pure]");
                indentWriter.WriteLine("[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]");
                indentWriter.WriteLine($"[global::System.CodeDom.Compiler.GeneratedCode(\"{TOOL_NAME}\", \"{VERSION}\")]");
                indentWriter.WriteLine("public static void LoadTranslations(this global::Localization.Shared.Interfaces.ITranslator translator)");
                indentWriter.Indent++;
                indentWriter.WriteLine("=> translator.RegisterTranslations(GetTranslations());");
                indentWriter.Indent--;
            }

            indentWriter.Indent--;
            indentWriter.WriteLine("}");
        }

        indentWriter.Indent--;
        indentWriter.WriteLine("}");

        return baseTextWriter.ToString();
    }
}
